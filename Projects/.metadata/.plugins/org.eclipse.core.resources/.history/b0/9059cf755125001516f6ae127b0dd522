package edu.kit.ipd.swt1.jmjrst.popart.filter;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import javax.imageio.ImageIO;

import org.junit.BeforeClass;
import org.junit.Test;

/**
 * Performanzermittlung
 * 
 * @author tk
 */
public class IPDPerformanceTest {

  /** Anzahl der Messl채ufe. */
  private static final int NUMLOOPS = 5;

  /** Alle zu testenden Fadenanzahlen. */
  private Integer[] threads = { 1, 2, 4, 8, 16, 32, 64, 128 };

  private static BufferedImage testImage;

  @BeforeClass
  public static void setUp() throws IOException {
    testImage = ImageIO.read(new File("src/test/resources/bike.png"));
  }

  @Test
  public void testPerformance() {
    long startTime, endTime;
    long[] measurements = new long[threads.length];

    System.out.println("Warmlaufen");
    for (int i = 0; i < 5; i++) {
      ImageFilter filter = new ParallelBlurFilter();
      BufferedImage destImage = filter.applyFilter(testImage);
      System.out.print(".");
    }

    System.out.println("Performanzmessung");
    for (int t = 0; t < threads.length; t++) {
      System.out.println("Starte Messung f체r " + threads[t] + " F채den");
      int curThreadCount = threads[t];
      ImageFilter filter = new ParallelBlurFilter(curThreadCount);

      // F체r mehr Messgenauigkeit :)
      for (int loop = 0; loop < NUMLOOPS; loop++) {

        // Start der Messung
        startTime = System.currentTimeMillis();
        BufferedImage destImage = filter.applyFilter(testImage);

        // Ende der Messung
        endTime = System.currentTimeMillis();
        measurements[t] += endTime - startTime;
      }
      measurements[t] /= NUMLOOPS;
    }
    System.out.println("Messergebnisse:");
    System.out.println(Arrays.toString(measurements));
  }
}

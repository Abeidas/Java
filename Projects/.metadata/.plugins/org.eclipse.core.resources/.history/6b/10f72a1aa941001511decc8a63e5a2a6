package edu.kit.informatik;

import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.Stack;

/**
 * 
 * @author Ahmad
 * @version 1.0
 */
public class Field {
    /**
     * First player.
     */
    Player firstPlayer = new Player();
    /**
     * Second player.
     */
    Player secondPlayer = new Player();
    /**
     * The gameField
     */
    Block[][] field;
    /**
     * Counts in a certain line, how many blocks the first player processed
     */
    int firstCounter = 0;
    /**
     * Counts in a certain line, how many blocks the second player processed
     */
    int secondCounter = 0;
    
    Stack<Integer> stack;
    /**
     * The Constructor initializes the field, filling a hashtag in each cell.
     */
    
    public Field() {
        field = new Block[10][10];
        for (int i = 0; i < field.length; i++) {
            for (int j = 0; j < field[i].length; j++) {
                field[i][j] = new Block('#', false);
            }
        }
    }
    /**
     * 
     * @param args Command-line-argument.
     * @throws OwnException If command-line is invalid.
     */
    public void commandLine(String[] args) throws OwnException {
        if (args.length != 2) {
            throw new OwnException("Error, command-line must only be two lines!");
        } else if (!args[0].matches("[0-9*+-]*") || !args[0].matches("[0-9*+-]*")) {
            throw new OwnException("Error, command-line can only consist of the pattern : [0-9*+-]!");
        } else {
            addToInventory(firstPlayer.getInventory(), args[0]);
            addToInventory(secondPlayer.getInventory(), args[1]);
            
        }
    }
    /**
     * 
     * @param input The Postfix-Notation.
     * @param x The x-coordinate.
     * @param y The y-coordinate.
     * @param horizontal If true the expression will be added horizontally, otherwise will be added vertically.
     * @param player The turn
     * @throws OwnException 
     */
    public void insert(String input, int x, int y, boolean horizontal, Player player) throws OwnException {
        char[] stones = input.toCharArray();
        if (stones.length == 0 || stones.length > 3 || x > field.length || x < 0 || y < 0 || y > field.length) {
            Terminal.printLine("Error, please try again");
        } else {
            int i = 0;
            int column = x - 1;
            int row = y - 1;
            
            while (stones.length > i) {
                if (field[column][row].getCharacter() == '#') {
                    field[row][column].setCharacter(stones[i]);
                    column = (horizontal) ? column + 1 : column;
                    row = (horizontal) ? row : row + 1;
                    i++;
                } else {
                    throw new OwnException("Error, cannot place on a non-empty block!");
                }
            }
            try {
                postFixNotation(stones.length, x - 1, y - 1, horizontal);
            } catch (OwnException e) {
                Terminal.printLine(e.getMessage());
            }
        }
    }
    /**
     * 
     * @param input Indicates how many characters are to be inserted,
     *  in other words the number of iterations in the While loop.
     * @param row Row.
     * @param column Column.
     * @param horizontal Instructs the method, to iterate, either horizontally or vertically, on the field.
     * @throws OwnException Throws an exception, if characters are isolated.
     */
    public void postFixNotation(int input, int row, int column, boolean horizontal) throws OwnException {
        boolean validDirection = true;
        int x = row;
        int y = column;
        int iterate = 0;
        validDirection = checkLine(x, y, !horizontal);
        while (iterate < input) {
            if (!(validDirection || checkLine(x, y, horizontal))) {
                throw new OwnException("Error, is isolated!");
            }
            x = (horizontal) ? x + 1 : x;
            y = (horizontal) ? y : y + 1;
            iterate++;
        }
        x = (!horizontal) ? 0 : row;
        y = (!horizontal) ? column : 0;
    }
    /**
     * 
     * @param column Column.
     * @param row Row.
     * @param horizontal return the score of a certain sequence.
     * @return Returns if it is acceptable, to insert a certain character in a certain cell. 
     * @throws OwnException If input is false.
     */
    public boolean checkLine(int row, int column, boolean horizontal) throws OwnException {
        stack = new Stack<Integer>();
        int key = (horizontal) ? row : column + 10;
        boolean lastIsOperand = false;
        int iterate = 0;
        int x = (horizontal) ? 0 : row;
        int y = (horizontal) ? column : 0;
        while (iterate < 10) {
            System.out.println("Stack size:" + stack.size());
            char symbol = field[x][y].getCharacter();
            if (!isNumber(symbol) && symbol != '#') {
                if (stack.size() == 1) {
                    throw new OwnException("Error, invalid input!");
                } else {
                    int right = stack.pop();
                    int left = stack.pop();
                    int result = calculate(symbol, right, left);
                    stack.push(result);
                    lastIsOperand = true;
                }
            } else if (isNumber(symbol)) {
                stack.push(Character.getNumericValue(symbol));
                lastIsOperand = false;
            }
            iterate++;
            x = (horizontal) ? x + 1 : x;
            y = (horizontal) ? y : y + 1;
        }
        wordValue(key);
        System.out.println(lastIsOperand);
        return lastIsOperand;
    }
    public void wordValue(int key) {
        if (firstCounter > secondCounter) {
            firstPlayer.getMap().put(key, stack.pop());
            secondPlayer.getMap().put(key, 0);
        } else {
            secondPlayer.getMap().put(key, stack.pop());
            firstPlayer.getMap().put(key, 0);
        }
        firstCounter = 0;
        secondCounter = 0;
    }
    
    /**
     * 
     * @param math The Operator
     * @param firstNumber First number in the calculation.
     * @param secondNumber Second number in the calculation.
     * @return The result.
     */
    public int calculate(char math, int firstNumber, int secondNumber) {
        int result = 0;
        switch (math) {
        case '+' : result = firstNumber + secondNumber;
        case '*' : result = firstNumber * secondNumber;
        case '-' : result = firstNumber - secondNumber;
        default:
            break;
        }
        return result;
    }
    /**
     * 
     * @param character Character.
     * @return Whether a char is a number not.
     */
    public boolean isNumber(char character) {
        if (String.valueOf(character).matches("^[0-9]")) {
            return  true;
        } return false;
    }
    /**
     * 
     * @param player The inventory of a certain player.
     * @param arg Single line from the argument.
     */
    public void addToInventory(ArrayList<Character> player, String arg) {
        char[] symbols = arg.toCharArray();
        for (char symbol : symbols) {
            player.add(symbol);
        }
    }
    /**
     * 
     * @param length Length of the input array.
     * @param x Column.
     * @param y Row.
     * @param horizontal Horizontal.
     */
    public void remove(int length, int x, int y, boolean horizontal) {
        int column = x;
        int row = y;
        int i = 0;
        while (i < length) {
            field[x][y].setCharacter('#');
            column = (horizontal) ? column + 1 : column;
            row = (horizontal) ? row : row + 1;
            i++;
        }
    }
    /**
     * 
     * @param block checks if this block used 
     */
    public void counter(Block block) {
        if (block.getUsedBy().equals(firstPlayer)) {
            this.firstCounter++;
        } else {
            this.secondCounter++;
        }
    }
    public String toString(int number, boolean horizontal) {
        int i = 0;
        int x = (horizontal) ? 0 : number - 1;
        int y = (horizontal) ? number - 1 : 0;
        String string = "";
        while (i < 10) {
            string += field[x][y].getCharacter();
            x = (horizontal) ? x + 1 : x;
            y = (horizontal) ? y : y + 1;
            i++;
        }
        return string;
    }
}
